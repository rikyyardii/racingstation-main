import{v as N,c as u,a as e,d as b,t as g,h as C,A as L,z as _,E as k,F,f as R,B as E,r as f,k as P,p as A,m as j,q,s as B,o as m}from"./VlqL9xn_.js";import{u as V}from"./BiDHMiVB.js";import{_ as M}from"./cYr9TBtS.js";const O={setup(){const a=f({id:null,category_id:"",session_name:"",session_order:1,is_active:!0}),s=f([]),v=f(!0),n=f(!1),d=f(null),S=f(!1),i=j(),p=q(),{API_URL:y}=P().public,w=async(o,r="API call")=>{if(!o.ok){let l=`HTTP ${o.status}: ${o.statusText}`;try{const c=o.headers.get("content-type");if(c&&c.includes("application/json")){const t=await o.json();l=t.error||t.message||l}else{const t=await o.text();t&&(l=t)}}catch{console.log("Could not parse error response")}throw new Error(`${r}: ${l}`)}},I=async()=>{try{console.log("Fetching categories for dropdown...");const o=await fetch(`${y}/event-categories`);await w(o,"Fetching categories");const r=await o.json();if(console.log("Categories loaded:",r),!Array.isArray(r))throw new Error("Categories data is not an array");s.value=r}catch(o){throw console.error("Error fetching categories:",o),new Error(`Failed to load categories: ${o.message}`)}},h=async o=>{try{console.log("Fetching session with ID:",o);const r=parseInt(o);if(isNaN(r)||r<=0)throw new Error("Invalid session ID format");const l=`${y}/sessions/${r}`;console.log("Full URL:",l);const c=await fetch(l);console.log("Response status:",c.status),await w(c,"Fetching session");const t=await c.json();if(console.log("Fetched session data:",t),!t)throw new Error("No data received from server");if(t.id===void 0||t.id===null)throw console.error("Session data missing ID:",t),new Error("Session data is missing required ID field");a.value={id:Number(t.id),category_id:t.category_id?String(t.category_id):"",session_name:t.session_name||"",session_order:t.session_order?Number(t.session_order):1,is_active:t.is_active!==void 0?!!t.is_active:!0},console.log("Session value after assignment:",a.value),await B(),console.log("Session value after nextTick:",a.value),a.value.session_name||console.warn("Session name is empty"),a.value.category_id||console.warn("Category ID is empty")}catch(r){throw console.error("Error fetching session:",r),new Error(`Failed to load session data: ${r.message}`)}},D=async()=>{try{if(n.value=!0,d.value=null,!a.value.category_id||!a.value.session_name||!a.value.session_order)throw new Error("Please fill in all required fields");if(!a.value.id)throw new Error("Session ID is missing");const o={category_id:parseInt(a.value.category_id),session_name:a.value.session_name.trim(),session_order:parseInt(a.value.session_order),is_active:!!a.value.is_active};if(isNaN(o.category_id)||o.category_id<=0)throw new Error("Invalid category selection");if(isNaN(o.session_order)||o.session_order<=0)throw new Error("Session order must be a positive number");if(!o.session_name)throw new Error("Session name cannot be empty");console.log("Submitting payload:",o);const r=`${y}/sessions/${a.value.id}`;console.log("Update URL:",r);const l=await fetch(r,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});console.log("Update response status:",l.status),await w(l,"Updating session");const c=l.headers.get("content-type");let t=null;if(c&&c.includes("application/json")){if(t=await l.json(),console.log("Update result:",t),t.success===!1)throw new Error(t.error||"Failed to update session")}else{const U=await l.text();console.log("Update response text:",U)}alert("Session berhasil diperbarui!"),p.push("/rikya/components/Session")}catch(o){console.error("Error updating session:",o),o.value=o.message,alert(`Error: ${o.message}`)}finally{n.value=!1}},x=()=>{p.push("/rikya/components/Session")},T=async()=>{const o=i.params.id;if(!o){d.value="Invalid session ID";return}try{v.value=!0,d.value=null,await Promise.all([I(),h(o)])}catch(r){console.error("Retry failed:",r),d.value=r.message}finally{v.value=!1}};return A(async()=>{const o=i.params.id;if(console.log("Session ID from route:",o),!o){d.value="ID Session tidak valid",alert("ID Session tidak valid"),p.push("/rikya/components/Session");return}const r=parseInt(o);if(isNaN(r)||r<=0){d.value="Invalid session ID format",alert("Invalid session ID format"),p.push("/rikya/components/Session");return}try{v.value=!0,d.value=null,await Promise.all([I(),h(o)]),console.log("Data loading completed successfully")}catch(l){console.error("Error loading data:",l),d.value=l.message,console.log("Loading failed, showing error state")}finally{v.value=!1}}),V({title:"Edit Session",ogTitle:"Edit Session"}),{session:a,categories:s,isLoading:v,isSubmitting:n,error:d,showDebug:S,route:i,API_URL:y,submitSession:D,navigateToSessions:x,retryLoading:T}}},J={class:"app-wrapper"},z={class:"header-content"},H={key:0,class:"dashboard"},G={key:1,class:"dashboard"},K={class:"form-container"},Q={key:2,class:"dashboard"},W={class:"form-container"},X={class:"form-group"},Y=["value"],Z={class:"form-group"},$={class:"form-group"},ss={class:"form-group"},es={class:"buttons-container"},os=["disabled"],ns={key:0,class:"debug-info",style:{"margin-top":"20px",padding:"10px",background:"#f5f5f5","border-radius":"5px"}};function is(a,s,v,n,d,S){return m(),u("div",J,[e("header",null,[e("div",z,[e("h1",{class:"logo",onClick:s[0]||(s[0]=(...i)=>n.navigateToSessions&&n.navigateToSessions(...i)),style:{cursor:"pointer"}},s[8]||(s[8]=[e("img",{src:M,alt:"RacingStation Logo",class:"logo-image"},null,-1),b(" Dashboard ")]))])]),n.isLoading?(m(),u("div",H,s[9]||(s[9]=[e("div",{class:"form-container"},[e("h1",{class:"black-text"},"Loading...")],-1)]))):n.error?(m(),u("div",G,[e("div",K,[s[10]||(s[10]=e("h1",{class:"black-text"},"Error",-1)),e("p",null,g(n.error),1),e("button",{type:"button",onClick:s[1]||(s[1]=(...i)=>n.navigateToSessions&&n.navigateToSessions(...i)),class:"action-btn cancel-btn"},"Back to Sessions")])])):(m(),u("div",Q,[e("div",W,[s[21]||(s[21]=e("h1",{class:"black-text"},"Edit Session",-1)),e("form",{onSubmit:s[7]||(s[7]=L((...i)=>n.submitSession&&n.submitSession(...i),["prevent"]))},[e("div",X,[s[12]||(s[12]=e("label",{for:"category_id"},"Category",-1)),_(e("select",{id:"category_id","onUpdate:modelValue":s[2]||(s[2]=i=>n.session.category_id=i),required:""},[s[11]||(s[11]=e("option",{value:""},"Pilih Category",-1)),(m(!0),u(F,null,R(n.categories,i=>(m(),u("option",{key:i.id,value:i.id},g(i.name)+" (ID: "+g(i.id)+")",9,Y))),128))],512),[[k,n.session.category_id]])]),e("div",Z,[s[13]||(s[13]=e("label",{for:"session_name"},"Session Name",-1)),_(e("input",{type:"text",id:"session_name","onUpdate:modelValue":s[3]||(s[3]=i=>n.session.session_name=i),required:""},null,512),[[E,n.session.session_name]])]),e("div",$,[s[14]||(s[14]=e("label",{for:"session_order"},"Session Order",-1)),_(e("input",{type:"number",id:"session_order","onUpdate:modelValue":s[4]||(s[4]=i=>n.session.session_order=i),min:"1",required:""},null,512),[[E,n.session.session_order]])]),e("div",ss,[s[16]||(s[16]=e("label",{for:"is_active"},"Status",-1)),_(e("select",{id:"is_active","onUpdate:modelValue":s[5]||(s[5]=i=>n.session.is_active=i),required:""},s[15]||(s[15]=[e("option",{value:!0},"Active",-1),e("option",{value:!1},"Inactive",-1)]),512),[[k,n.session.is_active]])]),e("div",es,[e("button",{type:"submit",class:"action-btn update-btn",disabled:n.isSubmitting},g(n.isSubmitting?"Updating...":"Update Session"),9,os),e("button",{type:"button",onClick:s[6]||(s[6]=(...i)=>n.navigateToSessions&&n.navigateToSessions(...i)),class:"action-btn cancel-btn"},"Cancel")])],32),n.showDebug?(m(),u("div",ns,[s[19]||(s[19]=e("h3",null,"Debug Info:",-1)),e("p",null,[s[17]||(s[17]=e("strong",null,"Session ID:",-1)),b(" "+g(n.route.params.id),1)]),e("p",null,[s[18]||(s[18]=e("strong",null,"API URL:",-1)),b(" "+g(n.API_URL),1)]),s[20]||(s[20]=e("p",null,[e("strong",null,"Session Data:")],-1)),e("pre",null,g(JSON.stringify(n.session,null,2)),1)])):C("",!0)])]))])}const ls=N(O,[["render",is],["__scopeId","data-v-6a22d297"]]);export{ls as default};
