import{v as f,c as C,a as t,d as b,A as _,z as p,B as g,t as k,r as y,k as w,q as T,o as h}from"./5_uCDQn8.js";import{u as S}from"./DnHITmjJ.js";import{_ as x}from"./BjtU-hcP.js";const N={setup(){const a=y({name:"",description:"",event_type_description:""}),e=y(!1),c=T(),{API_URL:o}=w().public,u=async()=>{if(!e.value)try{e.value=!0;const i={name:a.value.name.trim(),description:a.value.description.trim(),event_type_description:a.value.event_type_description.trim()};console.log("Creating new category with payload:",i),console.log("API URL:",`${o}/event-categories`);const r=await fetch(`${o}/event-categories`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(console.log("Create response status:",r.status),!r.ok){let l=`HTTP error! status: ${r.status}`;try{const d=await r.json();console.log("Create error response:",d),d.error&&(l=d.error)}catch{console.log("Could not parse error response as JSON")}throw new Error(l)}const v=r.headers.get("content-type");if(!v||!v.includes("application/json")){const l=await r.text();throw console.log("Non-JSON create response:",l),new Error("Server returned non-JSON response")}const n=await r.json();if(console.log("Create result:",n),n.message&&n.id)alert("Categories berhasil dibuat!"),c.push("/rikya/components/Categories");else throw new Error(n.error||"Gagal membuat categories")}catch(i){console.error("Error creating category:",i),alert(i.message||"Terjadi kesalahan saat membuat categories")}finally{e.value=!1}},m=()=>{c.push("/rikya/components/Categories")},s=()=>{a.value={name:"",description:"",event_type_description:""}};return S({title:"Add New Categories",ogTitle:"Add New Categories"}),{categories:a,isSubmitting:e,submitCategories:u,navigateToCategories:m,resetForm:s}}},M={class:"app-wrapper"},A={class:"header-content"},E={class:"dashboard"},j={class:"form-container"},D={class:"form-group"},O={class:"form-group"},R={class:"form-group"},U={class:"buttons-container"},V=["disabled"];function B(a,e,c,o,u,m){return h(),C("div",M,[t("header",null,[t("div",A,[t("h1",{class:"logo",onClick:e[0]||(e[0]=(...s)=>o.navigateToCategories&&o.navigateToCategories(...s)),style:{cursor:"pointer"}},e[6]||(e[6]=[t("img",{src:x,alt:"RacingStation Logo",class:"logo-image"},null,-1),b(" Dashboard ")]))])]),t("div",E,[t("div",j,[e[10]||(e[10]=t("h1",{class:"black-text"},"Add New Categories",-1)),t("form",{onSubmit:e[5]||(e[5]=_((...s)=>o.submitCategories&&o.submitCategories(...s),["prevent"]))},[t("div",D,[e[7]||(e[7]=t("label",{for:"name"},[b("Nama "),t("span",{class:"required"},"*")],-1)),p(t("input",{type:"text",id:"name","onUpdate:modelValue":e[1]||(e[1]=s=>o.categories.name=s),required:"",placeholder:"Masukkan nama kategori"},null,512),[[g,o.categories.name]])]),t("div",O,[e[8]||(e[8]=t("label",{for:"description"},"Deskripsi",-1)),p(t("input",{id:"description","onUpdate:modelValue":e[2]||(e[2]=s=>o.categories.description=s),rows:"3",placeholder:"Masukkan deskripsi kategori (opsional)"},null,512),[[g,o.categories.description]])]),t("div",R,[e[9]||(e[9]=t("label",{for:"event_type_description"},"Event Type",-1)),p(t("textarea",{type:"text",id:"event_type_description","onUpdate:modelValue":e[3]||(e[3]=s=>o.categories.event_type_description=s),placeholder:"Masukkan tipe event (opsional)"},null,512),[[g,o.categories.event_type_description]])]),t("div",U,[t("button",{type:"submit",class:"action-btn create-btn",disabled:o.isSubmitting},k(o.isSubmitting?"Creating...":"Create Categories"),9,V),t("button",{type:"button",onClick:e[4]||(e[4]=(...s)=>o.navigateToCategories&&o.navigateToCategories(...s)),class:"action-btn cancel-btn"},"Cancel")])],32)])])])}const I=f(N,[["render",B],["__scopeId","data-v-d0dc3189"]]);export{I as default};
